{
  "_args": [
    [
      {
        "raw": "jasmine-enzyme@1.0.0",
        "scope": null,
        "escapedName": "jasmine-enzyme",
        "name": "jasmine-enzyme",
        "rawSpec": "1.0.0",
        "spec": "1.0.0",
        "type": "version"
      },
      "/Users/kyleeacker/sites/launch/newsfeed"
    ]
  ],
  "_from": "jasmine-enzyme@1.0.0",
  "_id": "jasmine-enzyme@1.0.0",
  "_inCache": true,
  "_location": "/jasmine-enzyme",
  "_nodeVersion": "4.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/jasmine-enzyme-1.0.0.tgz_1462561677839_0.5289209054317325"
  },
  "_npmUser": {
    "name": "blainekasten",
    "email": "blainekasten@gmail.com"
  },
  "_npmVersion": "2.14.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jasmine-enzyme@1.0.0",
    "scope": null,
    "escapedName": "jasmine-enzyme",
    "name": "jasmine-enzyme",
    "rawSpec": "1.0.0",
    "spec": "1.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/jasmine-enzyme/-/jasmine-enzyme-1.0.0.tgz",
  "_shasum": "ea56a729c2c71986f139a441d5a090e3b9f8d1ca",
  "_shrinkwrap": null,
  "_spec": "jasmine-enzyme@1.0.0",
  "_where": "/Users/kyleeacker/sites/launch/newsfeed",
  "author": {
    "name": "Blaine Kasten",
    "email": "blainekasten@gmail.com"
  },
  "dependencies": {},
  "description": "Jasmine assertions for enzyme",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-eslint": "^6.0.0",
    "babel-jest": "^10.0.1",
    "babel-plugin-add-module-exports": "^0.1.2",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-react": "^6.5.0",
    "babel-register": "^6.5.2",
    "enzyme": "^2.2.0",
    "eslint": "^2.7.0",
    "eslint-config-airbnb": "^6.2.0",
    "eslint-plugin-react": "^4.3.0",
    "jest-cli": "^12.0.0",
    "react": "^0.14.7",
    "react-addons-test-utils": "^0.14.7",
    "react-dom": "^0.14.7",
    "readline-sync": "^1.4.1",
    "rimraf": "^2.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ea56a729c2c71986f139a441d5a090e3b9f8d1ca",
    "tarball": "https://registry.npmjs.org/jasmine-enzyme/-/jasmine-enzyme-1.0.0.tgz"
  },
  "files": [
    "src",
    "lib"
  ],
  "gitHead": "0844b36a31bbf0d8f395acdcf7acf345053e8894",
  "jest": {
    "testPathDirs": [
      "<rootDir>/src"
    ],
    "setupTestFrameworkScriptFile": "./src/jest.js",
    "unmockedModulePathPatterns": [
      "enzyme",
      "react"
    ],
    "verbose": true
  },
  "keywords": [
    "javascript",
    "shallow rendering",
    "shallowRender",
    "test",
    "reactjs",
    "react",
    "flux",
    "testing",
    "test utils",
    "assertion helpers",
    "tdd",
    "jasmine",
    "jest",
    "enzyme"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "blainekasten",
      "email": "blainekasten@gmail.com"
    }
  ],
  "name": "jasmine-enzyme",
  "optionalDependencies": {},
  "peerDependencies": {
    "enzyme": "1.x || 2.x"
  },
  "readme": "# jasmine-enzyme\n\n[![npm version](https://img.shields.io/npm/v/jasmine-enzyme.svg)](https://www.npmjs.com/package/jasmine-enzyme)\n![License](https://img.shields.io/npm/l/chai-enzyme.svg)\n[![Circle CI](https://circleci.com/gh/blainekasten/jasmine-enzyme/tree/master.svg?style=svg)](https://circleci.com/gh/blainekasten/jasmine-enzyme/tree/master)\n\n[Jasmine](http://jasmine.github.io/) assertions for [enzyme](https://github.com/airbnb/enzyme/).\n\nLarge thanks to [`chai-enzyme`](https://github.com/producthunt/chai-enzyme). We have  taken several thoughts from that library and ultimately hope to maintain feature parity.\n\n## Table of Contents\n\n  1. [Installation](#installation)\n  1. [Setup](#setup)\n    1. [Jest](#jest)\n    1. [Jasmine](#vanilla-jasmine)\n  1. [Assertions](#assertions)\n    1. [toBeChecked()](#tobechecked)\n    1. [toBeDisabled()](#tobedisabled)\n    1. [toBeEmpty()](#tobeempty)\n    1. [toBePresent()](#tobepresent)\n    1. [toContainReact()](#tocontainreactreactinstanceobject)\n    1. [toHaveClassName()](#tohaveclassnameclassnamestring)\n    1. [toHaveHTML()](#tohavehtmlhtmlstring)\n    1. [toHaveProp()](#tohaveproppropkeystring-propvalueany)\n    1. [toHaveRef()](#tohaverefrefnamestring)\n    1. [toHaveState()](#tohavestatestatekeystring-statevalueany)\n    1. [toHaveStyle()](#tohavestylestylekeystring-stylevalueany)\n    1. [toHaveTagName()](#tohavetagnametagnamestring)\n    1. [toHaveValue()](#tohavevaluevalueany)\n    1. [toMatchSelector()](#tomatchselectorselectorstring)\n  1. [Development](#development)\n  1. [Contributing](#contributing)\n  1. [License](#license)\n\n## Installation\n\n`jasmine-enzyme` depends on:\n\n\n```js\n\"peerDependencies\": {\n  \"jasmine\": \"1.x || 2.x\",\n  \"enzyme\": \"1.x || 2.x\"\n}\n```\n\n```\n$ npm install jasmine-enzyme --save-dev\n```\n\n## Setup\n\n###### Jest\nIf you are using [jest](https://facebook.github.io/jest/), the simplest setup is to use jests `setupTestFrameworkScriptFile` config. Add this to your `package.json`\n\n```js\n\"jest\": {\n  \"setupTestFrameworkScriptFile\": \"node_modules/jasmine-enzyme/lib/jest.js\",\n}\n```\n\n###### Vanilla Jasmine\nIf you are just using vanilla jasmine, you'll need to call\n`jasmineEnzyme()` in any `before` method due to the way jasmine's plugin\nsystem works.\n\n```js\nimport jasmineEnzyme from 'jasmine-enzyme';\n\ndescribe('test', () => {\n  beforeEach(() => {\n    jasmineEnzyme();\n  });\n\n  // tests\n});\n```\n\n## Assertions\n\n> Note that not all assertions work with every rendering strategy.\n\n> If you are wondering what rendering mechanism to use when, refer to\n> [enzyme's documentation](https://github.com/airbnb/enzyme).\n\n#### `toBeChecked()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper is checked:\n\n```js\nimport React from 'react'\nimport {mount, shallow} from 'enzyme'\n\nfunction Fixture() {\n  return (\n    <div>\n      <input id=\"checked\" defaultChecked />\n      <input id=\"not\" defaultChecked={false} />\n      <input id=\"tertiary\" defaultChecked checked={false} />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('#checked')).toBeChecked();\nexpect(wrapper.find('#not')).not.toBeChecked();\n```\n\n#### `toBeDisabled()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper is disabled:\n\n```js\nimport React from 'react'\nimport {mount, shallow} from 'enzyme'\n\nfunction Fixture() {\n  return (\n    <div>\n      <input id=\"disabled\" disabled />\n      <input id=\"not\"/>\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('#disabled')).toBeDisabled();\nexpect(wrapper.find('#not')).not.toBeDisabled();\n```\n\n#### `toBeEmpty()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper is empty:\n\n```js\nfunction Fixture() {\n  return (\n    <div>\n      <span className=\"foo\" />\n      <span className=\"bar baz\" />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('ul')).toBeEmpty();\nexpect(wrapper.find('span')).not.toBeEmpty();\n```\n\n#### `toBePresent()`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nOpposite of [`toBeEmpty()`](#toBeEmpty). Assert that the given wrapper has children of any length:\n\n```js\nfunction Fixture() {\n  return (\n    <div>\n      <span className=\"foo\" />\n      <span className=\"bar baz\" />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('span')).toBePresent();\nexpect(wrapper.find('ul')).not.toBePresent();\n```\n\n#### `toContainReact(ReactInstance:Object)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper contains the provided react instance:\n\n```js\nclass User extends React.Component {\n  render () {\n    return (\n      <span>User {this.props.index}</span>\n    )\n  }\n}\n\nUser.propTypes = {\n  index: React.PropTypes.number.isRequired\n}\n\nclass Fixture extends React.Component {\n  render () {\n    return (\n      <div>\n        <ul>\n          <li><User index={1} /></li>\n          <li><User index={2} /></li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper).toContainReact(<User index={1} />);\nexpect(wrapper).not.toContainReact(<User index={9000} />);\n```\n\n#### `toHaveClassName(className:string)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper has the provided className:\n\n```js\nfunction Fixture() {\n  return (\n    <div>\n      <span className=\"foo\" />\n      <span className=\"bar baz\" />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('.foo')).toHaveClassName('foo');\nexpect(wrapper.find('.foo')).not.toHaveClassName('baz');\n\nexpect(wrapper.find('.bar')).toHaveClassName('bar baz');\nexpect(wrapper.find('.bar')).toHaveClassName('baz');\n```\n\n#### `toHaveHTML(html:string)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper has the provided html:\n\n> **Note** Quotations are normalized.\n\n```js\nfunction Fixture() {\n  return (\n    <div id=\"root\">\n      <span id=\"child\">Test</span>\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('#child')).toHaveHTML(\n  '<span id=\"child\">Test</span>'\n);\n```\n\n#### `toHaveProp(propKey:string[, propValue:?any])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper has the provided propKey and associated value if specified:\n\n```js\nfunction User() { ... }\nUser.propTypes = {\n  foo: PropTypes.string,\n  bar: PropTypes.array,\n};\n\nfunction Fixture() {\n  return (\n    <div id=\"root\">\n      <User foo={'baz'} bar={[1,2,3]} />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find(User)).toHaveProp('foo');\nexpect(wrapper.find(User)).toHaveProp('foo', 'baz');\n\nexpect(wrapper.find(User)).toHaveProp('bar');\nexpect(wrapper.find(User)).toHaveProp('bar', [1,2,3]);\n```\n\n#### `toHaveRef(refName:string)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | no      |\n\nAssert that the mounted wrapper has the provided ref:\n\n```js\nclass Fixture extends React.Component {\n  render() {\n    return (\n      <div>\n        <span ref=\"child\" />\n      </div>\n    );\n  }\n}\n\nconst wrapper = mount(<Fixture />);\n\nexpect(wrapper).toHaveRef('child');\nexpect(wrapper).not.toHaveRef('foo');\n```\n\n#### `toHaveState(stateKey:string[, stateValue:?any])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the component has the provided stateKey and optional value if specified:\n\n```js\nclass Fixture extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      foo: false,\n    };\n  }\n\n  render() {\n    return (\n      <div />\n    );\n  }\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper).toHaveState('foo');\nexpect(wrapper).toHaveState('foo', false);\n```\n\n#### `toHaveStyle(styleKey:string[, styleValue:?any])`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the component has style of the provided key and value:\n\n```js\nfunction Fixture() {\n  const style1 = { height: '100%' };\n  const style2 = { flex: 8 };\n\n  return (\n    <div>\n      <span id=\"style1\" style={style1} />\n      <span id=\"style2\" style={style2} />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('#style1')).toHaveStyle('height', '100%');\nexpect(wrapper.find('#style2')).toHaveStyle('flex', 8);\n```\n\n#### `toHaveTagName(tagName:string)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the wrapper is of a certain tag type:\n\n```js\nfunction Fixture() {\n  return (\n    <div>\n      <span id=\"span\" />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />);\n\nexpect(wrapper.find('#span')).toHaveTagName('span');\nexpect(wrapper.find('#span')).not.toHaveTagName('div');\n```\n\n#### `toHaveValue(value:any)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the given wrapper has the provided `value`:\n\n```js\nfunction Fixture() {\n  return (\n    <div>\n      <input defaultValue=\"test\" />\n      <input defaultValue=\"foo\" value=\"bar\" onChange={jest.genMockFunction()} />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('input').at(0)).toHaveValue('test');\nexpect(wrapper.find('input').at(1)).toHaveValue('bar');\n```\n\n#### `toMatchSelector(selector:string)`\n\n| render | mount | shallow |\n| -------|-------|-------- |\n| no     | yes   | yes     |\n\nAssert that the wrapper matches the provided `selector`:\n\n```js\nfunction Fixture() {\n  return (\n    <div>\n      <span id=\"foo\" className=\"bar\" />\n    </div>\n  );\n}\n\nconst wrapper = mount(<Fixture />); // mount/render/shallow when applicable\n\nexpect(wrapper.find('span')).toMatchSelector('span');\nexpect(wrapper.find('span')).toMatchSelector('#foo');\nexpect(wrapper.find('span')).toMatchSelector('.bar');\n```\n\n## Development\n\n#### Setup\n\n```shell\n$ git clone <this repo>\n$ cd jasmein-enzyme\n$ npm install\n```\n\n#### Tests\n\nLinters:\n\n```shell\n$ npm run lint\n```\n\nTests:\n\n```shell\n$ npm test\n```\n\n## Contributing\n\nWe want to make this assertion library as robust and complete as possible. If you think that there are missing features/assertions, please open a GitHub issue or even better - a PR.\n\nBug reports and pull requests are welcome on GitHub. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org/) code of conduct.\n\n## License\n\n```\n _________________\n< The MIT License >\n -----------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "rimraf lib && babel src --out-dir lib --ignore tests",
    "lint": "eslint ./src",
    "release": "node ./scripts/release.js",
    "test": "jest"
  },
  "version": "1.0.0"
}
